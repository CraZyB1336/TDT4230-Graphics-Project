#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba32f) uniform image2D horizontalTexture;
layout(binding = 1, rgba32f) uniform image2D subsurfacedTexture;

uniform vec3 ssTint;
uniform float ssThick;

// Construct a 1D Kernel with arbitrary weights
// Weights are centered around index = 2
// Construct a 1D Kernel with arbitrary weights
// Weights are centered around index = 2
// const float kernel[4] = float[](0.34, 0.18, 0.1, 0.05);

// Gaussian blur
// const float kernel[3] = float[](0.375, 0.25, 0.0625);

// Jorge Jimenez's SSSS kernel
const float kernel[4] = float[](0.383, 0.242, 0.061, 0.006);

// const float kernel[6] = float[](0.266, 0.213, 0.110, 0.036, 0.008, 0.002);

// Identity
// const float kernel[3] = float[](1.0, 0.0, 0.0);

// Box blur
// const float kernel[3] = float[](0.2, 0.2, 0.2);

// Sharpening kernel
// const float kernel[3] = float[](1.4, -0.1, -0.1);

// Edge detection
// const float kernel[3] = float[](4.0, -1.0, -1.0);

void main() {
    ivec2 px = ivec2(gl_GlobalInvocationID.xy);

    vec3 orgCol = imageLoad(horizontalTexture, px).rgb;
    vec3 blurred = kernel[0] * imageLoad(horizontalTexture, px).rgb;

    for (int i = 1; i < kernel.length(); i++) {
        // Left
        blurred += kernel[0 + i] * imageLoad(horizontalTexture, px - ivec2(i, 0)).rgb;

        // Right
        blurred += kernel[0 + i] * imageLoad(horizontalTexture, px + ivec2(i, 0)).rgb;
    }

    vec3 finalColor = mix(orgCol, blurred, ssThick * 0.5);

    imageStore(subsurfacedTexture, px, vec4(finalColor, 1.0));
}